50% NST with 0.9 probability:

In Train on cuda Inputs through a every-image-loop, similar results in the Dataloader:
263 im/s

In Train on a Batch of 512 Images (each with 45% probability):
680 im/s
--> can be done with Splitting for 100% probability as well.
--> works with 1 worker.
--> Performance with 0 Workers: 535 im/s


In Data loading on a Batch of 250 Images, with Tensor transform and back (num_workers = 0 because of NAN loss):
515 im/s
--> smaller batchsize, around 5% Overhead for preprocessing to Tensor and back to PIL